version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: biodivproscope
      POSTGRES_USER: biodivuser
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_123}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U biodivuser -d biodivproscope"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - biodiv_network

  # ChromaDB Vector Database
  chromadb:
    image: chromadb/chroma:latest
    environment:
      - CHROMA_HOST=0.0.0.0
      - CHROMA_PORT=8000
    volumes:
      - chroma_data:/chroma/chroma
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - biodiv_network

  # Redis Cache (optional but recommended)
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - biodiv_network

  # Flask Backend API
  backend:
    build:
      context: ./FullStackApp/backend
      dockerfile: Dockerfile
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://biodivuser:${POSTGRES_PASSWORD:-secure_password_123}@postgres:5432/biodivproscope
      - SECRET_KEY=${SECRET_KEY:-your_super_secure_secret_key_change_this}
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
      - REDIS_URL=redis://redis:6379
      - CORS_ORIGINS=http://localhost:3000,https://${FRONTEND_DOMAIN:-localhost:3000}
    ports:
      - "5001:5001"
    depends_on:
      postgres:
        condition: service_healthy
      chromadb:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./reports:/tmp/reports
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - biodiv_network
    restart: unless-stopped

  # React Frontend
  frontend:
    build:
      context: ./FullStackApp/frontend
      dockerfile: Dockerfile
    environment:
      - REACT_APP_API_BASE_URL=http://localhost:5001
      - REACT_APP_ENVIRONMENT=production
    ports:
      - "3000:3000"
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - biodiv_network
    restart: unless-stopped

  # Nginx Load Balancer (optional, for production)
  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - biodiv_network
    restart: unless-stopped

volumes:
  postgres_data:
  chroma_data:
  redis_data:

networks:
  biodiv_network:
    driver: bridge
